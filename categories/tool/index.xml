<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tool on Linote</title>
    <link>http://yangchnet.github.io/Dessert/categories/tool/</link>
    <description>Recent content in Tool on Linote</description>
    <image>
      <url>http://yangchnet.github.io/Dessert/papermod-cover.png</url>
      <link>http://yangchnet.github.io/Dessert/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 03 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://yangchnet.github.io/Dessert/categories/tool/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>vim技巧</title>
      <link>http://yangchnet.github.io/Dessert/posts/tool/vim/</link>
      <pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>http://yangchnet.github.io/Dessert/posts/tool/vim/</guid>
      <description>1. 移动技巧 1.1 在同一行移动  首先是基本的hjkl 使用f&amp;lt;chat&amp;gt;来移动到当前行光标之后的字符上，这里可以选择一些出现频率较低的字符，这样有更高的移动效率。在使用f&amp;lt;char&amp;gt;后，，可以使用;来重复上次的查找移动，如果不小心多移动了一个，可以按,回退 使用w,e,b,ge在单词间跳转，其各自含义为：  w 正向移动到下一单词的开头 b 反向移动到当前单词/上一单词的开头 e 正向移动到当前单词/下一单词的结尾 ge 反向移动到上一单词的结尾   w、b等是在单词间的跳转，但一个逗号或点也算单词，如果是想把一个用空格分隔的串叫做单词，可以使用W， B， E， gE gj, gk按屏幕行进行上下移动  1.2 在当前文件内移动  使用*跳转到当前文件内的当前光标下的单词 %跳转到匹配的括号 使用/执行常规搜索，并按n再次执行搜索  1.3 使用位置标记跳转  m&amp;lt;a-z&amp;gt;在当前文件中标记当前位置，mA-Z在全局定义一个mark &#39;&amp;lt;a-zA-Z&amp;gt;跳转到刚才的缓冲区 vim还预置了一些特殊的标记：  &#39;&#39;当前文件中，上次跳转之前的位置； &#39;.上次修改的地方； &#39;^ 上次插入的地方 &#39;&amp;lt;, &#39;&amp;gt; 上次高亮选区的起始和结束位置    1.4 在文件之间移动  &amp;lt;C-o&amp;gt;, &amp;lt;C-i&amp;gt;后退和前进 [count]G 跳转到某个行号, 例如40G跳转至40行 (, )跳转到上一句/下一句的开头, {, }跳转到上一段/下一段的开头 gf 跳转到光标下的文件名 &amp;lt;C-]&amp;gt; 跳转到光标下关键字的定义 改变列表, :changes查看最近的更改，g;和g,跳转到下一个和上一个更改  2. 选择技巧  在可视模式下的选择技巧</description>
    </item>
    
    <item>
      <title>manjaro配置fcitx5输入法</title>
      <link>http://yangchnet.github.io/Dessert/posts/tool/linux%E9%85%8D%E7%BD%AEfcitx5%E8%BE%93%E5%85%A5%E6%B3%95/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>http://yangchnet.github.io/Dessert/posts/tool/linux%E9%85%8D%E7%BD%AEfcitx5%E8%BE%93%E5%85%A5%E6%B3%95/</guid>
      <description>1. 安装 yay -S fcitx5 fcitx5-rime fcitx5-input-support fcitx5-chinese-addons fcitx5-qt fcitx5-gtk fcitx5-configtool rime-double-pinyin rime-double-pinyin 是双拼输入法，我使用小鹤双拼。
开机自启：
cp /usr/share/applications/org.fcitx.Fcitx5.desktop ~/.config/autostart/ 配置 fcitx5的配置目录在：mkdir ~/.local/share/fcitx5/rime/
在这个目录下创建default.custom.yaml:
patch: schema_list: - schema: double_pinyin_flypy 使用小鹤双拼输入方案。
若想对某个输入方案进行自定义，例如小鹤双拼，其原配置文件为：~/.local/share/fcitx5/rime/double_pinyin_flypy.schema.yaml.则需要在~/.local/share/fcitx5/rime/下创建double_pinyin_flypy.custom.yaml，然后在其中进行自定义。 例如：
# encoding: utf-8 patch: &amp;#34;switches/@0/reset&amp;#34;: 1 switches: - name: ascii_mode reset: 1 states: [ 中文, 西文 ] # 默认英语 - name: full_shape reset: 0 # 默认半角 states: [ 半角, 全角 ] - name: zh_simp  # 注意這裏（※1） reset: 1 # 默认简体 states: [ 漢字, 汉字 ] switches/@next: name: emoji_suggestion reset: 1 # 默认开启emoji states: [ &amp;#34;🈚︎&amp;#34;, &amp;#34;🈶&amp;#34; ] &amp;#39;engine/filters/@before 0&amp;#39;: simplifier@emoji_suggestion emoji_suggestion: opencc_config: emoji.</description>
    </item>
    
    <item>
      <title>在manjaro台式机上使用罗技蓝牙鼠标</title>
      <link>http://yangchnet.github.io/Dessert/posts/tool/%E5%9C%A8manjaro%E5%8F%B0%E5%BC%8F%E6%9C%BA%E4%B8%8A%E4%BD%BF%E7%94%A8%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>http://yangchnet.github.io/Dessert/posts/tool/%E5%9C%A8manjaro%E5%8F%B0%E5%BC%8F%E6%9C%BA%E4%B8%8A%E4%BD%BF%E7%94%A8%E7%BD%97%E6%8A%80%E8%93%9D%E7%89%99%E9%BC%A0%E6%A0%87/</guid>
      <description>0. 软硬环境  系统：manjaro（内核6.1.44） 鼠标：mx anywhere 2s 无蓝牙  1. 通过优联连接鼠标与主机 这里需要下载solaar包来进行连接。
yay -S solaar  Solaar 是许多罗技键盘、鼠标和触控板的 Linux 管理器，可无线连接到 USB Unifying、Bolt、Lightspeed 或 Nano 接收器； 通过 USB 线直接连接； 或通过蓝牙连接。 Solar 不能与其他公司的外围设备配合使用。
 安装完成之后，打开solaar，将有如下ui界面出现，按步骤连接鼠标即可。 2. 设置鼠标按键 我的鼠标mx anywhere 2s上有一些按键，如果只用solaar连接到电脑，这些按键可能并不能发挥它的作用，因此我们需要将这些按键和快捷键进行绑定。 这里使用logiops
安装：
yay -S logiops 配置：
sudo vim /etc/logid.cfg 在logid.cfg中添加如下内容：
devices: ({ name: &amp;#34;Wireless Mobile Mouse MX Anywhere 2&amp;#34;; // A lower threshold number makes the wheel switch to free-spin mode // quicker when scrolling fast.</description>
    </item>
    
    <item>
      <title>常用工具集合</title>
      <link>http://yangchnet.github.io/Dessert/posts/tool/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/</link>
      <pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>http://yangchnet.github.io/Dessert/posts/tool/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86%E5%90%88/</guid>
      <description>1. draw.io 在线画图工具 https://app.diagrams.net/
2. sql to Gorm SQL语句转化为go结构体 https://sql2gorm.mccode.info/
3. 一些编程字体 https://www.nerdfonts.com/font-downloads
4. 团队协作工具 https://www.devbefore.com/product
5. markdown 写作工具（开源免费） https://marktext.app/
6. z 目录快速跳转 (强烈推荐) https://github.com/rupa/z (安装)https://yangchnet.github.io/Dessert/posts/tool/z/
7. nvm npm多版本管理 (强烈推荐) https://github.com/nvm-sh/nvm
8. lazydocker 容器查看工具 https://github.com/jesseduffield/lazydocker
9. dive 镜像查看工具 https://github.com/wagoodman/dive
10. corc 文件转发工具（任意主机） (强烈推荐) https://github.com/schollz/croc
11. asciinema 终端会话记录工具 https://github.com/asciinema/asciinema
12. tree 目录树工具 sudo apt-get install tree
13. Dev hints 技术速查表 https://devhints.io/
15. utools 快捷启动工具 (强烈推荐) https://u.tools/
16. 语雀 文档写作工具（团队/个人） https://www.yuque.com/
17. fehelper 一些小工具的集合（浏览器插件）(强烈推荐) https://www.</description>
    </item>
    
    <item>
      <title>vim配置</title>
      <link>http://yangchnet.github.io/Dessert/posts/tool/vim%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 29 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://yangchnet.github.io/Dessert/posts/tool/vim%E9%85%8D%E7%BD%AE/</guid>
      <description>1. 安装插件系统  使用的是vim-plug
 curl -fLo ~/.vim/autoload/plug.vim --create-dirs \  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 2. 安装插件 打开~/.vimrc, 在其中写入：
&amp;quot; Specify a directory for plugins &amp;quot; - For Neovim: stdpath(&#39;data&#39;) . &#39;/plugged&#39; &amp;quot; - Avoid using standard Vim directory names like &#39;plugin&#39; call plug#begin(&#39;~/.vim/plugged&#39;) &amp;quot; Make sure you use single quotes &amp;quot; Shorthand notation; fetches https://github.com/junegunn/vim-easy-align Plug &#39;junegunn/vim-easy-align&#39; &amp;quot; Any valid git URL is allowed Plug &#39;junegunn/vim-github-dashboard&#39; &amp;quot; On-demand loading Plug &#39;scrooloose/nerdtree&#39;, { &#39;on&#39;: &#39;NERDTreeToggle&#39; } Plug &#39;tpope/vim-fireplace&#39;, { &#39;for&#39;: &#39;clojure&#39; } &amp;quot; Using a non-default branch Plug &#39;rdnetto/YCM-Generator&#39;, { &#39;branch&#39;: &#39;stable&#39; } &amp;quot; Using a tagged release; wildcard allowed (requires git 1.</description>
    </item>
    
    <item>
      <title>z</title>
      <link>http://yangchnet.github.io/Dessert/posts/tool/z/</link>
      <pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://yangchnet.github.io/Dessert/posts/tool/z/</guid>
      <description>install z # Download to latest to home dir wget https://raw.githubusercontent.com/rupa/z/master/z.sh -O ~/z.sh # Add to .bashrc echo . /path/to/z.sh &amp;gt;&amp;gt; ~/.bashrc # Add to .zshrc echo . /path/to/z.sh &amp;gt;&amp;gt; ~/.zshrc </description>
    </item>
    
    <item>
      <title>pm2使用指南</title>
      <link>http://yangchnet.github.io/Dessert/posts/tool/pm2%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>http://yangchnet.github.io/Dessert/posts/tool/pm2%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>1. 安装pm2 npm install pm2 -g 或
yarn global add pm2 使用pm2 -v查看版本号
2. 基本使用 2.1 启动应用 pm2 start app.js # 不止是js文件，其他可执行文件也可以执行 pm2 start script.sh # 启动bash脚本 pm2 start python3 -- app.py # -- 后跟要传给命令的参数 pm2 start binary -- -port 8080 在启动应用时还有一些参数
--name &amp;lt;app_name&amp;gt; # 为应用设置一个名字 --watch # 监视源文件并在源文件存在更改时重启应用 --max-memory-restart &amp;lt;200MB&amp;gt; # 设置应用占用内存上限 --log &amp;lt;log_path&amp;gt; # 设置log文件路径 -- arg1 arg2 arg3 # 传递参数 --restart-delay &amp;lt;delay in ms&amp;gt; # 重启前延时 --time 在日志前增加时间戳 --no-autorestart # 不要自动重启 2.</description>
    </item>
    
  </channel>
</rss>
