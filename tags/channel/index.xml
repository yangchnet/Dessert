<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>channel on Linote</title>
    <link>http://yangchnet.github.io/tags/channel/</link>
    <description>Recent content in channel on Linote</description>
    <image>
      <url>http://yangchnet.github.io/papermod-cover.png</url>
      <link>http://yangchnet.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 02 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://yangchnet.github.io/tags/channel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>channel的行为</title>
      <link>http://yangchnet.github.io/posts/golang/channel%E7%9A%84%E8%A1%8C%E4%B8%BA/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>http://yangchnet.github.io/posts/golang/channel%E7%9A%84%E8%A1%8C%E4%B8%BA/</guid>
      <description>1. nil channel   接收 接收goroutine阻塞
  发送 发送个goroutine阻塞
  2. 向无缓冲channel发送消息   接受队列有goroutine 接收端将收到消息
  接收队列无goroutine 发送goroutine将阻塞
  已有发送goroutine阻塞 发送goroutine将阻塞
  3. 从无缓冲channel接收消息   无发送goroutine 接收端阻塞
  有发送goroutine 收到消息
  4. 向有缓冲channel发送消息   队列未满 正常发送
  队列已满 发送端阻塞
  5. 从有缓冲channel接收消息   队列中有消息 正常接收
  队列中无消息 接收端阻塞
  6. 对close channel的操作   向closed channel发送 panic</description>
    </item>
    
    <item>
      <title>面试题golang</title>
      <link>http://yangchnet.github.io/posts/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://yangchnet.github.io/posts/golang/%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>三个goroutine分别输出张三、李四、王五，使其按上述顺序输出5遍。 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; ) var w sync.WaitGroup func main() { w.Add(15) chan1 := make(chan struct{}, 0) chan2 := make(chan struct{}, 0) for i := 0; i &amp;lt; 5; i++ { go func() { defer w.Done() fmt.Println(&amp;#34;张三&amp;#34;) chan1 &amp;lt;- struct{}{} }() go func() { defer w.Done() &amp;lt;- chan1 fmt.Println(&amp;#34;李四&amp;#34;) chan2 &amp;lt;- struct{}{} }() go func() { defer w.Done() &amp;lt;- chan2 fmt.Println(&amp;#34;王五&amp;#34;) }() } w.Wait() } 编写程序输出某目录下的所有文件（包括子目录） package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;os&amp;#34; ) func main() { dir := os.</description>
    </item>
    
  </channel>
</rss>
