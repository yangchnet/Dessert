<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>指令 on Linote</title>
    <link>http://yangchnet.github.io/tags/%E6%8C%87%E4%BB%A4/</link>
    <description>Recent content in 指令 on Linote</description>
    <image>
      <url>http://yangchnet.github.io/papermod-cover.png</url>
      <link>http://yangchnet.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 25 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://yangchnet.github.io/tags/%E6%8C%87%E4%BB%A4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue中的指令介绍</title>
      <link>http://yangchnet.github.io/posts/%E5%89%8D%E7%AB%AF/vue%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://yangchnet.github.io/posts/%E5%89%8D%E7%AB%AF/vue%E6%8C%87%E4%BB%A4/</guid>
      <description>Vue中的指令介绍 指令  解释：指令 (Directives) 是带有 v- 前缀的特殊属性 作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM  v-text 解释：更新元素的 textContent
&amp;lt;h1 v-text=&amp;#34;msg&amp;#34;&amp;gt;&amp;lt;/h1&amp;gt; v-html 解释：更新元素的 innerHTML
&amp;lt;h1 v-html=&amp;#34;msg&amp;#34;&amp;gt;&amp;lt;/h1&amp;gt; v-bind 作用：当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM.响应式地更新 HTML attribute： 语法：v-bind:title=&amp;quot;msg&amp;quot; 简写：:title=&amp;quot;msg&amp;quot;
&amp;lt;!-- 完整语法 --&amp;gt; &amp;lt;a v-bind:href=&amp;#34;url&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;!-- 缩写 --&amp;gt; &amp;lt;a :href=&amp;#34;url&amp;#34;&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;script&amp;gt; // 2 创建 Vue 的实例对象  var vm = new Vue({ // el 用来指定vue挂载到页面中的元素，值是：选择器  // 理解：用来指定vue管理的HTML区域  el: &amp;#39;#app&amp;#39;, // 数据对象，用来给视图中提供数据的  data: { url: &amp;#39;http://www.baidu.com&amp;#39; } }) &amp;lt;/script&amp;gt; v-on 作用：绑定事件 语法：v-on:click=&amp;quot;say&amp;quot; or v-on:click=&amp;quot;say(&#39;参数&#39;, $event)&amp;quot; 简写：@click=&amp;quot;say&amp;quot; 说明：绑定的事件从methods中获取</description>
    </item>
    
    <item>
      <title>基本计算指令</title>
      <link>http://yangchnet.github.io/posts/%E6%B1%87%E7%BC%96/%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://yangchnet.github.io/posts/%E6%B1%87%E7%BC%96/%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E6%8C%87%E4%BB%A4/</guid>
      <description>基本计算指令  这里的汇编指令均基于x86-64架构
 0. 先验知识 0.1 寄存器设置 一个x86-64的中央处理单元包含一组16个64位通用目的寄存器。这些寄存器用来存储整数数据和指针。指令可以对这16个寄存器的低位字节中存放的不同大小的数据进行操作。字节级操作可以访问最低的字节，16位操作可以访问最低的2个字节，32位操作可以访问最低的4个字节，而64位操作可以访问整个寄存器。
3. 寻址方式 1. 数据传送指令 最简单形式的数据传送指令&amp;ndash;mov类。这些指令把数据从源位置复制到目的位置，不做任何变化。mov类指令由四条指令组成：movb, movw, movl,movq.这些指令都执行相同的操作，区别在于它们操作的数据大小不同：分别是1，2，4，8字节。
 由于历史原因，Intel处理器将16位作为一个字（w），8位为一个字节(b)，32位为双字(l),64位为4字（q）
    指令 效果 描述     MOV S D D &amp;lt;- S 传送   movb  传送字节   movw  传送字   movl  传送双字   movq  传送四字   movabsq I, R  传送绝对的四字    传送指令的两个操作数不能都指向内存位置。将一个值从一个内存位置复制到另一个内存位置需要两个步骤，第一个指令将源值加载到寄存器，第二条指令将该寄存器写入目的位置。
example
 C code</description>
    </item>
    
  </channel>
</rss>
